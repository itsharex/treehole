// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Jazee6/treehole/cmd/topic/model"
)

func newStar(db *gorm.DB, opts ...gen.DOOption) star {
	_star := star{}

	_star.starDo.UseDB(db, opts...)
	_star.starDo.UseModel(&model.Star{})

	tableName := _star.starDo.TableName()
	_star.ALL = field.NewAsterisk(tableName)
	_star.UID = field.NewUint32(tableName, "uid")
	_star.TopicID = field.NewUint32(tableName, "topic_id")
	_star.CreatedAt = field.NewTime(tableName, "created_at")

	_star.fillFieldMap()

	return _star
}

type star struct {
	starDo

	ALL       field.Asterisk
	UID       field.Uint32
	TopicID   field.Uint32
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (s star) Table(newTableName string) *star {
	s.starDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s star) As(alias string) *star {
	s.starDo.DO = *(s.starDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *star) updateTableName(table string) *star {
	s.ALL = field.NewAsterisk(table)
	s.UID = field.NewUint32(table, "uid")
	s.TopicID = field.NewUint32(table, "topic_id")
	s.CreatedAt = field.NewTime(table, "created_at")

	s.fillFieldMap()

	return s
}

func (s *star) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *star) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["uid"] = s.UID
	s.fieldMap["topic_id"] = s.TopicID
	s.fieldMap["created_at"] = s.CreatedAt
}

func (s star) clone(db *gorm.DB) star {
	s.starDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s star) replaceDB(db *gorm.DB) star {
	s.starDo.ReplaceDB(db)
	return s
}

type starDo struct{ gen.DO }

type IStarDo interface {
	gen.SubQuery
	Debug() IStarDo
	WithContext(ctx context.Context) IStarDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStarDo
	WriteDB() IStarDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStarDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStarDo
	Not(conds ...gen.Condition) IStarDo
	Or(conds ...gen.Condition) IStarDo
	Select(conds ...field.Expr) IStarDo
	Where(conds ...gen.Condition) IStarDo
	Order(conds ...field.Expr) IStarDo
	Distinct(cols ...field.Expr) IStarDo
	Omit(cols ...field.Expr) IStarDo
	Join(table schema.Tabler, on ...field.Expr) IStarDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStarDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStarDo
	Group(cols ...field.Expr) IStarDo
	Having(conds ...gen.Condition) IStarDo
	Limit(limit int) IStarDo
	Offset(offset int) IStarDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStarDo
	Unscoped() IStarDo
	Create(values ...*model.Star) error
	CreateInBatches(values []*model.Star, batchSize int) error
	Save(values ...*model.Star) error
	First() (*model.Star, error)
	Take() (*model.Star, error)
	Last() (*model.Star, error)
	Find() ([]*model.Star, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Star, err error)
	FindInBatches(result *[]*model.Star, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Star) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStarDo
	Assign(attrs ...field.AssignExpr) IStarDo
	Joins(fields ...field.RelationField) IStarDo
	Preload(fields ...field.RelationField) IStarDo
	FirstOrInit() (*model.Star, error)
	FirstOrCreate() (*model.Star, error)
	FindByPage(offset int, limit int) (result []*model.Star, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStarDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s starDo) Debug() IStarDo {
	return s.withDO(s.DO.Debug())
}

func (s starDo) WithContext(ctx context.Context) IStarDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s starDo) ReadDB() IStarDo {
	return s.Clauses(dbresolver.Read)
}

func (s starDo) WriteDB() IStarDo {
	return s.Clauses(dbresolver.Write)
}

func (s starDo) Session(config *gorm.Session) IStarDo {
	return s.withDO(s.DO.Session(config))
}

func (s starDo) Clauses(conds ...clause.Expression) IStarDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s starDo) Returning(value interface{}, columns ...string) IStarDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s starDo) Not(conds ...gen.Condition) IStarDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s starDo) Or(conds ...gen.Condition) IStarDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s starDo) Select(conds ...field.Expr) IStarDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s starDo) Where(conds ...gen.Condition) IStarDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s starDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IStarDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s starDo) Order(conds ...field.Expr) IStarDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s starDo) Distinct(cols ...field.Expr) IStarDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s starDo) Omit(cols ...field.Expr) IStarDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s starDo) Join(table schema.Tabler, on ...field.Expr) IStarDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s starDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStarDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s starDo) RightJoin(table schema.Tabler, on ...field.Expr) IStarDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s starDo) Group(cols ...field.Expr) IStarDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s starDo) Having(conds ...gen.Condition) IStarDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s starDo) Limit(limit int) IStarDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s starDo) Offset(offset int) IStarDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s starDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStarDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s starDo) Unscoped() IStarDo {
	return s.withDO(s.DO.Unscoped())
}

func (s starDo) Create(values ...*model.Star) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s starDo) CreateInBatches(values []*model.Star, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s starDo) Save(values ...*model.Star) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s starDo) First() (*model.Star, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Star), nil
	}
}

func (s starDo) Take() (*model.Star, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Star), nil
	}
}

func (s starDo) Last() (*model.Star, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Star), nil
	}
}

func (s starDo) Find() ([]*model.Star, error) {
	result, err := s.DO.Find()
	return result.([]*model.Star), err
}

func (s starDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Star, err error) {
	buf := make([]*model.Star, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s starDo) FindInBatches(result *[]*model.Star, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s starDo) Attrs(attrs ...field.AssignExpr) IStarDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s starDo) Assign(attrs ...field.AssignExpr) IStarDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s starDo) Joins(fields ...field.RelationField) IStarDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s starDo) Preload(fields ...field.RelationField) IStarDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s starDo) FirstOrInit() (*model.Star, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Star), nil
	}
}

func (s starDo) FirstOrCreate() (*model.Star, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Star), nil
	}
}

func (s starDo) FindByPage(offset int, limit int) (result []*model.Star, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s starDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s starDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s starDo) Delete(models ...*model.Star) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *starDo) withDO(do gen.Dao) *starDo {
	s.DO = *do.(*gen.DO)
	return s
}
